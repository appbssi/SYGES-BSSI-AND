
{
  "entities": {
    "Agent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Agent",
      "type": "object",
      "description": "Represents a military agent.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Agent entity."
        },
        "registrationNumber": {
          "type": "string",
          "description": "The agent's registration number; serves as a unique identifier issued by the military."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the agent."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the agent."
        },
        "rank": {
          "type": "string",
          "description": "The agent's military rank."
        },
        "contactNumber": {
          "type": "string",
          "description": "The agent's contact phone number."
        },
        "address": {
          "type": "string",
          "description": "The agent's current address."
        },
        "status": {
          "type": "string",
          "description": "The agent's current status (e.g., available, busy)."
        }
      },
      "required": [
        "id",
        "registrationNumber",
        "firstName",
        "lastName",
        "rank",
        "contactNumber",
        "address",
        "status"
      ]
    },
    "Mission": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Mission",
      "type": "object",
      "description": "Represents a mission assigned to one or more agents.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Mission entity."
        },
        "name": {
          "type": "string",
          "description": "The name or title of the mission."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the mission."
        },
        "startDate": {
          "type": "string",
          "description": "The start date and time of the mission.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date and time of the mission.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "startDate",
        "endDate"
      ]
    },
    "AgentMission": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AgentMission",
      "type": "object",
      "description": "Represents the assignment of an agent to a mission.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AgentMission entity."
        },
        "agentId": {
          "type": "string",
          "description": "Reference to Agent. (Relationship: Agent 1:N AgentMission)"
        },
        "missionId": {
          "type": "string",
          "description": "Reference to Mission. (Relationship: Mission 1:N AgentMission)"
        },
        "notes": {
          "type": "string",
          "description": "Additional notes or comments about the agent's role in the mission."
        }
      },
      "required": [
        "id",
        "agentId",
        "missionId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/agents/{agentId}",
        "definition": {
          "entityName": "Agent",
          "schema": {
            "$ref": "#/backend/entities/Agent"
          },
          "description": "Stores agent data. Includes fields for registration number, name, rank, contact, address, and status. Only admins can create/modify/delete agents.",
          "params": [
            {
              "name": "agentId",
              "description": "The unique identifier for the agent."
            }
          ]
        }
      },
      {
        "path": "/missions/{missionId}",
        "definition": {
          "entityName": "Mission",
          "schema": {
            "$ref": "#/backend/entities/Mission"
          },
          "description": "Stores mission data. Includes fields for mission name, description, start date, and end date. Only admins can create/modify/delete missions.",
          "params": [
            {
              "name": "missionId",
              "description": "The unique identifier for the mission."
            }
          ]
        }
      },
      {
        "path": "/agents/{agentId}/missions/{missionId}",
        "definition": {
          "entityName": "AgentMission",
          "schema": {
            "$ref": "#/backend/entities/AgentMission"
          },
          "description": "Represents the assignment of an agent to a mission. Includes denormalized mission data for authorization independence and notes about the agent's role. Access controlled by agentId and missionId.",
          "params": [
            {
              "name": "agentId",
              "description": "The unique identifier for the agent."
            },
            {
              "name": "missionId",
              "description": "The unique identifier for the mission."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage military agents and their missions effectively, ensuring data integrity, security, and scalability. The core principle is Authorization Independence, achieved through denormalization to avoid `get()` calls in security rules. This allows for atomic operations and easier debugging. Structural Segregation is used to maintain homogeneous security postures within collections. Access Modeling standardizes authorization patterns using path-based ownership and membership maps.\n\n- Agents: Agents are stored under the `/agents` collection, allowing any authenticated user to list agents, but only admins can create/modify/delete them. Status is stored directly within the Agent document.\n- Missions: Missions are stored in the `/missions` collection, with similar access controls as agents.\n- AgentMissions: The AgentMission entities are stored under a subcollection `/agents/{agentId}/missions/{missionId}` to simplify security rules and follow a hierarchical data model for easy management and querying. Each AgentMission document contains the mission details. Agent missions are used to model the many-to-many relationship between agents and missions. The AgentMission document includes denormalized data from the mission to avoid extra reads during queries and simplifies the rules for access. This design supports efficient listing of missions assigned to a specific agent.\n\nThis structure supports the required QAPs by:\n\n- Segregating data based on access needs: Agents and missions are in separate collections with controlled access.\n- Using path-based ownership for AgentMissions: `/agents/{agentId}/missions/{missionId}` ensures that only authorized users (potentially the agent themselves or admins) can access/modify assignment details.\n- Avoiding rules as filters: List operations are secured by the collection structure and security rules, preventing the need to filter based on document data."
  }
}
