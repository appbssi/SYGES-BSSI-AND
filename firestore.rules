/**
 * @fileOverview
 * Core Philosophy: This ruleset enforces a strict role-based access control model for agents and missions.
 * Only authenticated users can list agents and missions, but create, update, and delete operations are restricted to administrators.
 * Data Structure: Agents and missions are stored in their respective root collections (/agents/{agentId} and /missions/{missionId}).
 * AgentMission relationships are modeled using a subcollection under each agent (/agents/{agentId}/missions/{missionId}).
 * Key Security Decisions:
 *  - Listing of agents and missions is allowed for all authenticated users.
 *  - Creation, modification, and deletion of agents and missions are restricted to administrators.
 *  - Ownership is enforced for AgentMission entities via path-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /agents collection.
     * @path /agents/{agentId}
     * @allow get,list (Authenticated user) - Can read and list all agents.
     * @allow create,update,delete (Admin user) - Can create, update and delete agents.
     * @deny create,update,delete (Non-admin user) - Cannot create, update, or delete agents.
     * @principle Role-based access control, restricting write access to administrators.
     */
    match /agents/{agentId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the /missions collection.
     * @path /missions/{missionId}
     * @allow get,list (Authenticated user) - Can read and list all missions.
     * @allow create,update,delete (Admin user) - Can create, update and delete missions.
     * @deny create,update,delete (Non-admin user) - Cannot create, update, or delete missions.
     * @principle Role-based access control, restricting write access to administrators.
     */
    match /missions/{missionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to the /agents/{agentId}/missions/{missionId} subcollection.
     * @path /agents/{agentId}/missions/{missionId}
     * @allow get,list (Owner) - The agent can read and list their own missions.
     * @allow create,update,delete (Owner) - The agent can create, update and delete their own missions.
     * @deny create,update,delete (Non-owner) - Cannot create, update, or delete missions for other agents.
     * @principle Ownership is enforced via path-based access control.
     */
    match /agents/{agentId}/missions/{missionId} {
      allow get, list: if isSignedIn() && isOwner(agentId);
      allow create: if isSignedIn() && isOwner(agentId);
      allow update: if isSignedIn() && isOwner(agentId) && resource != null;
      allow delete: if isSignedIn() && isOwner(agentId) && resource != null;
    }

    // Helper function to determine if the request is from the owner.
    function isOwner(agentId) {
      return request.auth.uid == agentId;
    }

    // Helper function to determine if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}